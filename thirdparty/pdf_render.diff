diff --git a/render/Cargo.toml b/render/Cargo.toml
index 1b14cea..2ccb515 100644
--- a/render/Cargo.toml
+++ b/render/Cargo.toml
@@ -12,8 +12,8 @@ name = "render"
 harness = false
 
 [dependencies.pdf]
-default-features=false 
-git = "https://github.com/pdf-rs/pdf"
+default-features=false
+path = "../../pdf/pdf"
 
 [dependencies]
 pathfinder_renderer = { git = "https://github.com/servo/pathfinder" }
@@ -28,7 +28,7 @@ itertools = "*"
 image = "0.24.2"
 instant = "*"
 custom_debug_derive = "*"
-globalcache = { git = "https://github.com/s3bk/cachelib", features = ["sync"] }
+globalcache = { path = "../../cachelib", features = ["sync"] }
 istring = { git = "https://github.com/s3bk/istring" }
 once_cell = "*"
 serde_json = "*"
diff --git a/render/src/font.rs b/render/src/font.rs
index accf9cf..8e4be2a 100644
--- a/render/src/font.rs
+++ b/render/src/font.rs
@@ -49,6 +49,7 @@ pub struct StandardCache {
     inner: Arc<SyncCache<String, Option<FontRc>>>,
     dir: PathBuf,
     fonts: HashMap<String, String>,
+    fonts_embedded: Option<FontRc>,
 }
 impl StandardCache {
     pub fn new(dir: PathBuf) -> Self {
@@ -59,6 +60,18 @@ impl StandardCache {
             inner: SyncCache::new(),
             dir,
             fonts,
+            fonts_embedded: None
+        }
+    }
+
+    pub fn new_embedded() -> Self {
+        let fonts: HashMap<String, String> = HashMap::new();
+        const EMBEDDED: &[u8] = include_bytes!("../../../pdf_fonts/n019003l.pfb");
+        StandardCache {
+            inner: SyncCache::new(),
+            dir: PathBuf::new(),
+            fonts,
+            fonts_embedded: Some(font::parse(EMBEDDED).expect("invalid font").into())
         }
     }
 }
@@ -66,7 +79,7 @@ impl StandardCache {
 pub fn load_font(font_ref: &MaybeRef<PdfFont>, resolve: &impl Resolve, cache: &StandardCache) -> Result<Option<FontEntry>> {
     let pdf_font = font_ref.clone();
     debug!("loading {:?}", pdf_font);
-    
+
     let font: FontRc = match pdf_font.embedded_data(resolve) {
         Some(Ok(data)) => {
             let font = font::parse(&data).map_err(|e| {
@@ -79,6 +92,9 @@ pub fn load_font(font_ref: &MaybeRef<PdfFont>, resolve: &impl Resolve, cache: &S
         }
         Some(Err(e)) => return Err(e),
         None => {
+            if let Some(font) = &cache.fonts_embedded {
+                return Ok(Some(FontEntry::build(font.clone(), pdf_font, resolve)?));
+            }
             let name = match pdf_font.name {
                 Some(ref name) => name.as_str(),
                 None => return Ok(None)
diff --git a/render/src/tracer.rs b/render/src/tracer.rs
index a6797ed..d4dfcaf 100644
--- a/render/src/tracer.rs
+++ b/render/src/tracer.rs
@@ -10,7 +10,7 @@ use pathfinder_geometry::{
 };
 use pathfinder_content::{
     stroke::{StrokeStyle},
-}; 
+};
 use pdf::object::{Ref, XObject, ImageXObject, Resolve, Resources, MaybeRef};
 use font::Glyph;
 use pdf::font::Font as PdfFont;
@@ -39,6 +39,13 @@ impl TraceCache {
             std: StandardCache::new(standard_fonts),
         }
     }
+
+    pub fn new_embedded() -> Self {
+        TraceCache {
+            fonts: SyncCache::new(),
+            std: StandardCache::new_embedded()
+        }
+    }
 }
 impl<'a> Tracer<'a> {
     pub fn new(cache: &'a TraceCache) -> Self {
@@ -97,7 +104,7 @@ impl<'a> Backend for Tracer<'a> {
     fn draw_glyph(&mut self, _glyph: &Glyph, _mode: &DrawMode, _transform: Transform2F) {}
     fn get_font(&mut self, font_ref: &MaybeRef<PdfFont>, resolve: &impl Resolve) -> Result<Option<Arc<FontEntry>>, PdfError> {
         let mut error = None;
-        let val = self.cache.fonts.get(&**font_ref as *const PdfFont as usize, || 
+        let val = self.cache.fonts.get(&**font_ref as *const PdfFont as usize, ||
             match load_font(font_ref, resolve, &self.cache.std) {
                 Ok(Some(f)) => Some(Arc::new(f)),
                 Ok(None) => None,
